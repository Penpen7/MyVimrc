[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = 'let g:WebDevIconsUnicodeDecorateFolderNodes = 1'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'
depends = 'fzf'
hook_add = '''
nmap <Leader>f [fzf-p]
xmap <Leader>f [fzf-p]

nnoremap <silent> [fzf-p]p     :<C-u>FzfPreviewFromResourcesRpc project_mru git<CR>
nnoremap <silent> [fzf-p]gs    :<C-u>FzfPreviewGitStatusRpc<CR>
nnoremap <silent> [fzf-p]ga    :<C-u>FzfPreviewGitActionsRpc<CR>
nnoremap <silent> [fzf-p]b     :<C-u>FzfPreviewBuffersRpc<CR>
nnoremap <silent> [fzf-p]B     :<C-u>FzfPreviewAllBuffersRpc<CR>
nnoremap <silent> [fzf-p]o     :<C-u>FzfPreviewFromResourcesRpc buffer project_mru<CR>
nnoremap <silent> [fzf-p]<C-o> :<C-u>FzfPreviewJumpsRpc<CR>
nnoremap <silent> [fzf-p]g;    :<C-u>FzfPreviewChangesRpc<CR>
nnoremap <silent> [fzf-p]/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
nnoremap <silent> [fzf-p]*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
nnoremap          [fzf-p]gr    :<C-u>FzfPreviewProjectGrepRpc<Space>
xnoremap          [fzf-p]gr    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
nnoremap <silent> [fzf-p]t     :<C-u>FzfPreviewBufferTagsRpc<CR>
nnoremap <silent> [fzf-p]q     :<C-u>FzfPreviewQuickFixRpc<CR>
nnoremap <silent> [fzf-p]l     :<C-u>FzfPreviewLocationListRpc<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline_theme = 'gruvbox'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
'''
depends = ['vim-airline-themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
depends = 'SirVer/ultisnips'
hook_add = '''
  let g:coc_global_extensions = ['coc-word', 'coc-diagnostic', 'coc-tsserver', 'coc-rls', 'coc-json', 'coc-jedi', 'coc-go', 'coc-clangd', 'coc-json', 'coc-css', 'coc-cssmodules', 'coc-toml', 'coc-yaml', 'coc-sql', 'coc-snippets']
  autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  "スペースhでHover
  nmap <silent> <space>h :call CocAction('doHover')<CR>
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nmap <silent> <space>fmt <Plug>(coc-format)
  nmap <silent> <space>r <Plug>(coc-rename) 

  " Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

  " Mappings for CoCList
  " Show all diagnostics.
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

  autocmd CursorHold * silent call CocActionAsync('highlight')
'''

[[plugins]]
repo = 'Penpen7/IMEswitcher.nvim'
build = 'make'
hook_add = '''
if has('mac')
  autocmd InsertLeave * :call IMEswitcher#InsertLeave()
  autocmd InsertEnter * :call IMEswitcher#InsertEnter()
endif
'''


[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "iberianpig/tig-explorer.vim"
depends = ["bclose.vim"]
hook_add = '''
nnoremap <Space>g :Tig<CR>
'''

[[plugins]]
repo = "rbgrouleff/bclose.vim"

[[plugins]]
repo = "vim-denops/denops.vim"


[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
let g:rainbow_conf = {
	\	'separately': {
	\		'nerdtree': 0,
	\	}
	\}
'''

[[plugins]]
repo = 'godlygeek/tabular'


[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:easymotion#is_active = 0
function! EasyMotionCoc() abort
  if EasyMotion#is_active()
    let g:easymotion#is_active = 1
    CocDisable
    GitGutterDisable
  else
    if g:easymotion#is_active == 1
      let g:easymotion#is_active = 0
      CocEnable
      GitGutterEnable
    endif
  endif
endfunction
autocmd TextChanged,CursorMoved * call EasyMotionCoc()
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
nnoremap <C-e> :Fern . -reveal=% -drawer -toggle -width=40<CR>
nnoremap <C-n><C-n> :Fern . <CR>
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
augroup my-glyph-palette
  autocmd! *
  autocmd FileType fern call glyph_palette#apply()
  autocmd FileType nerdtree,startify call glyph_palette#apply()
augroup END
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
nnoremap <Leader>o :<C-u>execute "OpenBrowser" "file:///" . expand('%:p:gs?\\?/?')<CR>
'''

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf']

[[plugins]]
repo = "diepm/vim-rest-console"

[[plugins]]
repo = "morhetz/gruvbox"
hook_add = '''
let g:airline_powerline_fonts = 1
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_transparent_bg = 1
autocmd SourcePost * highlight Normal     ctermbg=NONE guibg=NONE
        \ |    highlight LineNr     ctermbg=NONE guibg=NONE
        \ |    highlight SignColumn ctermbg=NONE guibg=NONE
colorscheme gruvbox
'''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.erb,*.php,*.vue,*.tsx'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'mbbill/undotree'
[[plugins]]
repo = 'SirVer/ultisnips'
